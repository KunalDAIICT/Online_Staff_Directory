// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class SignupTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void signup() {
    // Test name: signup
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("https://campus-connect-ecru.vercel.app/");
    // 2 | setWindowSize | 1440x900 | 
    driver.manage().window().setSize(new Dimension(1440, 900));
    // 3 | click | css=.MuiButton-contained | 
    driver.findElement(By.cssSelector(".MuiButton-contained")).click();
    // 4 | type | id=firstName | su
    driver.findElement(By.id("firstName")).sendKeys("su");
    // 5 | type | id=lastName | test
    driver.findElement(By.id("lastName")).sendKeys("test");
    // 6 | type | id=email | vanspar59@gmail.com
    driver.findElement(By.id("email")).sendKeys("vanspar59@gmail.com");
    // 7 | click | id=password | 
    driver.findElement(By.id("password")).click();
    // 8 | type | id=password | Horse#07
    driver.findElement(By.id("password")).sendKeys("Horse#07");
    // 9 | type | id=confirm password | Horse#07
    driver.findElement(By.id("confirm password")).sendKeys("Horse#07");
    // 10 | type | id=mobile | 1234567890
    driver.findElement(By.id("mobile")).sendKeys("1234567890");
    // 11 | mouseDown | id=:r6: | 
    {
      WebElement element = driver.findElement(By.id(":r6:"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).clickAndHold().perform();
    }
    // 12 | mouseUp | css=.MuiButtonBase-root:nth-child(6) | 
    {
      WebElement element = driver.findElement(By.cssSelector(".MuiButtonBase-root:nth-child(6)"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).release().perform();
    }
    // 13 | click | css=body | 
    driver.findElement(By.cssSelector("body")).click();
    // 14 | click | css=.MuiButtonBase-root:nth-child(3) | 
    driver.findElement(By.cssSelector(".MuiButtonBase-root:nth-child(3)")).click();
    // 15 | mouseOver | name=role | 
    {
      WebElement element = driver.findElement(By.name("role"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 16 | click | name=role | 
    driver.findElement(By.name("role")).click();
    // 17 | mouseOut | name=role | 
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }
    // 18 | click | css=.MuiButton-containedPrimary | 
    driver.findElement(By.cssSelector(".MuiButton-containedPrimary")).click();
  }
}
